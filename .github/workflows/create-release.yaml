name: Create Release PR

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release (major, minor, patch). Used if a specific version is not provided.'
        required: true
        default: 'minor'
      provider:
        description: 'Provider (aws, azure, cloud-director or vsphere)'
        required: true
        default: 'aws'
      version:
        description: 'Optional: Specify an exact version to create (e.g., v30.5.2 for a backport).'
        required: false
  schedule:
    - cron: '0 8 1 * *' # Run at 08:00 on the first day of every month

jobs:
  dispatcher:
    runs-on: ubuntu-latest
    outputs:
      release_type: ${{ steps.vars.outputs.release_type }}
      version_override: ${{ github.event.inputs.version }}
      provider_matrix: ${{ steps.vars.outputs.provider_matrix }}
    steps:
      - id: vars
        run: |
          release_type_input="${{ github.event.inputs.release_type }}"
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            MONTH=$(date +'%m')
            if (( 10#${MONTH} % 3 == 1 )); then
              echo "release_type=major" >> $GITHUB_OUTPUT
            else
              echo "release_type=minor" >> $GITHUB_OUTPUT
            fi
            echo 'provider_matrix=["aws", "azure", "vsphere", "cloud-director"]' >> $GITHUB_OUTPUT
          else
            echo "release_type=${release_type_input}" >> $GITHUB_OUTPUT
            PROVIDER_INPUT="${{ github.event.inputs.provider }}"
            echo "provider_matrix=[\"$PROVIDER_INPUT\"]" >> $GITHUB_OUTPUT
          fi

  minor_patch_release:
    needs: dispatcher
    if: needs.dispatcher.outputs.release_type != 'major'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        provider: ${{ fromJSON(needs.dispatcher.outputs.provider_matrix) }}
    env:
      OPSCTL_GITHUB_TOKEN: ${{ secrets.TAYLORBOT_GITHUB_ACTION }}
      GH_TOKEN: ${{ secrets.TAYLORBOT_GITHUB_ACTION }}
    steps:
      - name: Check out code
        uses: actions/checkout@v5
      - name: Install devctl from release binary
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p /tmp/devctl_install && cd /tmp/devctl_install
          LATEST_DEVCTL_TAG=$(gh release view --repo giantswarm/devctl --json tagName --jq '.tagName')
          ASSET_NAME="devctl-${LATEST_DEVCTL_TAG}-linux-amd64.tar.gz"
          gh release download --repo giantswarm/devctl "$LATEST_DEVCTL_TAG" --pattern "$ASSET_NAME"
          tar -xzf "$ASSET_NAME"
          find . -name "devctl" -type f -exec sudo mv {} /usr/local/bin/devctl \;
          cd -
      - name: Set provider display name for title
        id: provider_name
        run: |
          provider="${{ matrix.provider }}"
          name=""
          if [[ "$provider" == "aws" ]]; then
            name="CAPA"
          elif [[ "$provider" == "azure" ]]; then
            name="CAPZ"
          elif [[ "$provider" == "vsphere" ]]; then
            name="CAPV"
          elif [[ "$provider" == "cloud-director" ]]; then
            name="CAPVCD"
          else
            name=$(echo "$provider" | tr 'a-z' 'A-Z')
          fi
          echo "NAME=$name" >> $GITHUB_OUTPUT
      - name: Determine next release version
        id: versioning
        run: |
          ./tools/determine-next-release.sh ${{ matrix.provider }} ${{ needs.dispatcher.outputs.release_type }} ${{ needs.dispatcher.outputs.version_override }}
      - name: Check for existing PR
        id: check_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: release-${{ steps.versioning.outputs.NEXT_RELEASE }}-${{ matrix.provider }}
        run: |
          if gh pr list --head "$BRANCH_NAME" --json number --limit 1 | grep -q "number"; then
            echo "PR for branch $BRANCH_NAME already exists. Skipping provider ${{ matrix.provider }}."
            echo "PR_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "No existing PR found for branch $BRANCH_NAME. Proceeding."
            echo "PR_EXISTS=false" >> $GITHUB_OUTPUT
          fi
      - name: Create new release
        if: steps.check_pr.outputs.PR_EXISTS == 'false'
        id: create_release
        run: |
          set -o pipefail
          devctl release create \
            --base ${{ steps.versioning.outputs.LATEST_RELEASE }} \
            --name ${{ steps.versioning.outputs.NEXT_RELEASE }} \
            --provider ${{ matrix.provider }} \
            --bumpall --overwrite -y --output markdown --changes-only 2>&1 | tee /tmp/release_output.log
      - name: Create Pull Request
        id: create_pr
        if: steps.check_pr.outputs.PR_EXISTS == 'false'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.TAYLORBOT_GITHUB_ACTION }}
          commit-message: "feat: Create ${{ steps.versioning.outputs.NEXT_RELEASE }} for ${{ matrix.provider }}"
          title: "${{ steps.provider_name.outputs.NAME }}: Release ${{ steps.versioning.outputs.NEXT_RELEASE }}."
          body: |
            This PR was automatically created. It creates `${{ steps.versioning.outputs.NEXT_RELEASE }}` for `${{ matrix.provider }}`.

            ---

            **Note:** To update the release files, comment `/update-release` on this PR.
            You can also provide arguments directly to `devctl`, for example:
            `/update-release --component flatcar@1.2.3`
            `/update-release --app aws-ebs-csi-driver@3.0.5`
          branch: "release-${{ steps.versioning.outputs.NEXT_RELEASE }}-${{ matrix.provider }}"
          draft: true
      - name: Read log file to env
        if: steps.check_pr.outputs.PR_EXISTS == 'false' && steps.create_pr.outputs.pull-request-number
        run: |
          log_content=$(cat /tmp/release_output.log)
          echo "LOG_CONTENT<<EOF" >> $GITHUB_ENV
          echo "${log_content}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Post devctl output as a comment
        if: steps.check_pr.outputs.PR_EXISTS == 'false' && steps.create_pr.outputs.pull-request-number
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TAYLORBOT_GITHUB_ACTION }}
          script: |
            const output = process.env.LOG_CONTENT;
            github.rest.issues.createComment({
              issue_number: ${{ steps.create_pr.outputs.pull-request-number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### Changes:\n\n${output.replace(/`/g, '\\`')}`
            });

      - name: Trigger e2e tests
        if: steps.check_pr.outputs.PR_EXISTS == 'false' && steps.create_pr.outputs.pull-request-number
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TAYLORBOT_GITHUB_ACTION }}
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ steps.create_pr.outputs.pull-request-number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '/run releases-test-suites'
            })

  major_release:
    needs: dispatcher
    if: needs.dispatcher.outputs.release_type == 'major'
    runs-on: ubuntu-latest
    env:
      OPSCTL_GITHUB_TOKEN: ${{ secrets.TAYLORBOT_GITHUB_ACTION }}
      GH_TOKEN: ${{ secrets.TAYLORBOT_GITHUB_ACTION }}
    steps:
      - name: Check out code
        uses: actions/checkout@v5
      - name: Install devctl from release binary
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p /tmp/devctl_install && cd /tmp/devctl_install
          LATEST_DEVCTL_TAG=$(gh release view --repo giantswarm/devctl --json tagName --jq '.tagName')
          ASSET_NAME="devctl-${LATEST_DEVCTL_TAG}-linux-amd64.tar.gz"
          gh release download --repo giantswarm/devctl "$LATEST_DEVCTL_TAG" --pattern "$ASSET_NAME"
          tar -xzf "$ASSET_NAME"
          find . -name "devctl" -type f -exec sudo mv {} /usr/local/bin/devctl \;
          cd -
      - name: Determine next release version
        id: versioning
        run: |
          ./tools/determine-next-release.sh "" ${{ needs.dispatcher.outputs.release_type }} ${{ needs.dispatcher.outputs.version_override }}
      - name: Check for existing PR
        id: check_pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: release-${{ steps.versioning.outputs.NEXT_RELEASE }}
        run: |
          if gh pr list --head "$BRANCH_NAME" --json number --limit 1 | grep -q "number"; then
            echo "PR for branch $BRANCH_NAME already exists. Skipping job."
            echo "PR_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "No existing PR found for branch $BRANCH_NAME. Proceeding."
            echo "PR_EXISTS=false" >> $GITHUB_OUTPUT
          fi
      - name: Check if new Kubernetes version exists
        if: steps.check_pr.outputs.PR_EXISTS == 'false'
        id: k8s_check
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./tools/check-new-k8s-version-exists.sh ${{ steps.versioning.outputs.NEXT_RELEASE }}
      - name: Create release files for all providers
        if: steps.check_pr.outputs.PR_EXISTS == 'false' && steps.k8s_check.outputs.VERSION_EXISTS == 'true'
        run: |
          set -o pipefail
          LOG_FILE="/tmp/release_output.log"
          touch $LOG_FILE
          for provider in aws azure vsphere cloud-director; do
            echo "--- Creating release for $provider ---"
            BASE_VERSION=$(./tools/determine-next-release.sh $provider major ${{ steps.versioning.outputs.version_override }} | grep 'Base release:' | awk '{print $3}')
            devctl release create \
              --base $BASE_VERSION \
              --name ${{ steps.versioning.outputs.NEXT_RELEASE }} \
              --provider $provider \
              --bumpall --overwrite -y --output markdown --changes-only 2>&1 | tee -a $LOG_FILE
          done
        env:
          OPSCTL_GITHUB_TOKEN: ${{ secrets.TAYLORBOT_GITHUB_ACTION }}
          GH_TOKEN: ${{ secrets.TAYLORBOT_GITHUB_ACTION }}

      - name: Update README.md
        if: steps.check_pr.outputs.PR_EXISTS == 'false' && steps.k8s_check.outputs.VERSION_EXISTS == 'true'
        run: |
          for provider in aws azure vsphere capa cloud-director; do
            ./tools/update-readme.sh "$provider" "${{ steps.versioning.outputs.NEXT_RELEASE }}"
          done

      - name: Create Pull Request
        id: create_pr
        if: steps.check_pr.outputs.PR_EXISTS == 'false' && steps.k8s_check.outputs.VERSION_EXISTS == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.TAYLORBOT_GITHUB_ACTION }}
          commit-message: "CAPI: Release ${{ steps.versioning.outputs.NEXT_RELEASE }}"
          title: "CAPI: Release ${{ steps.versioning.outputs.NEXT_RELEASE }}."
          body: |
            This PR was automatically created and contains the new major release for all CAPI providers.

            ---

            **Note:** To update the release files, comment `/update-release` on this PR.
            You can also provide arguments directly to `devctl`, for example:
            `/update-release --component flatcar@1.2.3`
            `/update-release --app aws-ebs-csi-driver@3.0.5`
          branch: "release-${{ steps.versioning.outputs.NEXT_RELEASE }}"
          draft: true
      - name: Read log file to env
        if: steps.check_pr.outputs.PR_EXISTS == 'false' && steps.k8s_check.outputs.VERSION_EXISTS == 'true' && steps.create_pr.outputs.pull-request-number
        run: |
          log_content=$(cat /tmp/release_output.log)
          echo "LOG_CONTENT<<EOF" >> $GITHUB_ENV
          echo "${log_content}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      - name: Post devctl output as a comment
        if: steps.check_pr.outputs.PR_EXISTS == 'false' && steps.k8s_check.outputs.VERSION_EXISTS == 'true' && steps.create_pr.outputs.pull-request-number
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TAYLORBOT_GITHUB_ACTION }}
          script: |
            const output = process.env.LOG_CONTENT;
            github.rest.issues.createComment({
              issue_number: ${{ steps.create_pr.outputs.pull-request-number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### Changes:\n\n${output.replace(/`/g, '\\`')}`
            });

      - name: Trigger e2e tests
        if: steps.check_pr.outputs.PR_EXISTS == 'false' && steps.k8s_check.outputs.VERSION_EXISTS == 'true' && steps.create_pr.outputs.pull-request-number
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TAYLORBOT_GITHUB_ACTION }}
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ steps.create_pr.outputs.pull-request-number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '/run releases-test-suites'
            })
