name: Update Release PR (Comment Trigger)

on:
  issue_comment:
    types: [created]

jobs:
  update:
    name: Update release files
    if: |
      github.event.issue.pull_request &&
      startsWith(github.event.comment.body, '/update-release')
    runs-on: ubuntu-latest
    env:
      OPSCTL_GITHUB_TOKEN: ${{ secrets.TAYLORBOT_GITHUB_ACTION }}
      GH_TOKEN: ${{ secrets.TAYLORBOT_GITHUB_ACTION }}
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Add reaction to comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TAYLORBOT_GITHUB_ACTION }}
          script: |
            github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ github.event.comment.id }},
              content: 'rocket'
            })

      - name: Get PR branch name
        id: get_branch
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TAYLORBOT_GITHUB_ACTION }}
          result-encoding: string
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.issue.number }}
            });
            return pr.data.head.ref;

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.get_branch.outputs.result }}

      - name: Install GitHub CLI
        run: sudo apt-get update && sudo apt-get install -y gh

      - name: Parse command arguments
        id: parse_args
        run: |
          COMMENT_BODY="${{ github.event.comment.body }}"
          # Remove the command part and trim leading/trailing whitespace
          ARGS=$(echo "$COMMENT_BODY" | sed 's|^/update-release||' | xargs)
          echo "DEVCTL_ARGS=$ARGS" >> $GITHUB_OUTPUT

      - name: Parse branch name
        id: parse_branch
        run: |
          BRANCH_NAME="${{ steps.get_branch.outputs.result }}"
          if [[ $BRANCH_NAME == release-v*-* ]]; then
            # Minor/patch branch: release-v31.2.0-azure
            VERSION=$(echo $BRANCH_NAME | cut -d'-' -f2)
            PROVIDER=$(echo $BRANCH_NAME | cut -d'-' -f3)
            echo "IS_MAJOR=false" >> $GITHUB_OUTPUT
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "PROVIDER=$PROVIDER" >> $GITHUB_OUTPUT
          else
            # Major release branch: release-v32.0.0
            VERSION=$(echo $BRANCH_NAME | cut -d'-' -f2)
            echo "IS_MAJOR=true" >> $GITHUB_OUTPUT
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          fi
          
      - name: Install devctl from release binary
        env:
          GH_TOKEN: ${{ secrets.TAYLORBOT_GITHUB_ACTION }}
        run: |
          mkdir -p /tmp/devctl_install && cd /tmp/devctl_install
          LATEST_DEVCTL_TAG=$(gh release view --repo giantswarm/devctl --json tagName --jq '.tagName')
          ASSET_NAME="devctl-${LATEST_DEVCTL_TAG}-linux-amd64.tar.gz"
          gh release download --repo giantswarm/devctl "$LATEST_DEVCTL_TAG" --pattern "$ASSET_NAME"
          tar -xzf "$ASSET_NAME"
          find . -name "devctl" -type f -exec sudo mv {} /usr/local/bin/devctl \;
          cd -

      - name: Recreate release files
        run: |
          set -o pipefail
          if [[ "${{ steps.parse_branch.outputs.IS_MAJOR }}" == "true" ]]; then
            # Major release: loop through all providers
            LOG_FILE="/tmp/release_output.log"
            touch $LOG_FILE
            for provider in aws azure vsphere cloud-director; do
              echo "--- Recreating release for $provider ---"
              BASE_VERSION=$(./tools/determine-next-release.sh $provider major ${{ steps.parse_branch.outputs.VERSION }} | grep 'Base release:' | awk '{print $3}')
              devctl release create \
                --base $BASE_VERSION \
                --name ${{ steps.parse_branch.outputs.VERSION }} \
                --provider $provider \
                --bumpall --overwrite -y ${{ steps.parse_args.outputs.DEVCTL_ARGS }} 2>&1 | tee -a $LOG_FILE
            done
          else
            # Minor/patch release for a single provider
            PROVIDER="${{ steps.parse_branch.outputs.PROVIDER }}"
            VERSION="${{ steps.parse_branch.outputs.VERSION }}"
            BASE_VERSION=$(./tools/determine-next-release.sh $PROVIDER "minor" $VERSION | grep 'Base release:' | awk '{print $3}')
            devctl release create \
              --base $BASE_VERSION \
              --name $VERSION \
              --provider $PROVIDER \
              --bumpall --overwrite -y ${{ steps.parse_args.outputs.DEVCTL_ARGS }} 2>&1 | tee /tmp/release_output.log
          fi

      - name: Commit and push changes
        id: create_pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.TAYLORBOT_GITHUB_ACTION }}
          commit-message: "chore: Recreate release files"
          branch: ${{ steps.get_branch.outputs.result }}
          # By not providing a title, body, or base, the action will commit
          # to the existing branch and update the associated PR automatically.

      - name: Add success reaction
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TAYLORBOT_GITHUB_ACTION }}
          script: |
            github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ github.event.comment.id }},
              content: '+1'
            })
      - name: Read log file to env
        run: |
          log_content=$(cat /tmp/release_output.log)
          echo "LOG_CONTENT<<EOF" >> $GITHUB_ENV
          echo "${log_content}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Post devctl output as a comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TAYLORBOT_GITHUB_ACTION }}
          script: |
            const output = process.env.LOG_CONTENT;
            github.rest.issues.createComment({
              issue_number: ${{ github.event.issue.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### devctl output\n\n\`\`\`\n${output.replace(/`/g, '\\`')}\n\`\`\``
            });
